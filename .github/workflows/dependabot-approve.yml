name: Dependabot auto-approve
on: pull_request

permissions:
  pull-requests: write

jobs:
  dependabot:
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v1
        with:
          alert-lookup: true
          compat-lookup: true
          github-token: "${{ secrets.GITHUB_TOKEN }}"
      - name: Tag PR
        if: ${{ steps.dependabot-metadata.outputs.update-type != 'version-update:semver-major' }}
        run: gh pr edit "$PR_URL" --add-label "bug"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Approve a PR
        if: ${{ steps.dependabot-metadata.outputs.update-type != 'version-update:semver-major' 
                && steps.dependabot-metadata.outputs.compatibility-score == '100'
                && steps.dependabot-metadata.outputs.cvss >= '7.0' }}
        run: gh pr review --approve "$PR_URL"
        env:
          PR_URL: ${{github.event.pull_request.html_url}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      - name: Login
        uses: atlassian/gajira-login@master
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }} # The domain you use to access Jira workspace (e.g. sendsafely.atlassian.net)
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }} # The email of the user you want to be creating the issues
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }} # The API token for that user https://confluence.atlassian.com/cloud/api-tokens-938839638.html
      - name: Get Priority
        id: priority
        run: |
          echo ${steps.dependabot-metadata.outputs.cvss}
          if ${steps.dependabot-metadata.outputs.cvss} >= 7.0
            echo "HIGH" >> $PRIORITY_NAME
          then
            echo "LOW" >> $PRIORITY_NAME
          if
          echo ${PRIORITY_NAME}
      - name: Create high priority new Jira issue
        if: ${{ steps.dependabot-metadata.outputs.compatibility-score != '100'
          && steps.dependabot-metadata.outputs.cvss < '7.0' }}
        id: issue
        uses: atlassian/gajira-create@master
        with:
          project: ${{secrets.JIRA_ISSUE_KEY}} # Key of the project
          issuetype: Bug
          summary: Update major version dependency update
          fields: '{ "priority": { "name": "' ${{ PRIORITY_NAME }} '" } }'
          description: ${{ github.event }} https://github.com/${{ github.repository }}/commit/${{github.sha}}
#      - name: Create medium new Jira issue
#        if: ${{ steps.dependabot-metadata.outputs.compatibility-score != '100'
#          && steps.dependabot-metadata.outputs.cvss < '7.0' }}
#        id: issue
#        uses: atlassian/gajira-create@master
#        with:
#         project: ${{secrets.JIRA_ISSUE_KEY}} # Key of the project
#         issuetype: Bug
#         summary: Update minor version dependency update
#         fields: '{ "priority": { "name": "Medium" } }'
#         description: ${{ github.event }} https://github.com/${{ github.repository }}/commit/${{github.sha}}
#      - name: Get and set the active Sprint ID
#        id: SprintJsoner
#        run: |
#          export SPRINT_JSON=$(curl --location --request GET 'https://sendsafely.atlassian.net/rest/agile/1.0/board/${{secrets.JIRA_BOARD_ID}}/sprint?state=active' \
#          -u ${{secrets.JIRA_USER_EMAIL}}:${{secrets.JIRA_API_TOKEN}} \
#          --header 'Content-Type: application/json')
#          echo "SPRINT_ID=$SPRINT_JSON" >> $GITHUB_OUTPUT
#          echo "Sprint JSON: $SPRINT_JSON"
#      - name: Add issue to the current sprint
#        if: ${{ steps.dependabot-metadata.outputs.compatibility-score != '100'
#          && steps.dependabot-metadata.outputs.cvss < '7.0' }}
#        run: |
#          curl --location --request POST 'https://sendsafely.atlassian.net/rest/agile/1.0/sprint/${{fromJson(steps.SprintJsoner.outputs.SPRINT_ID).values[0].id}}/issue' \
#          -u ${{secrets.JIRA_USER_EMAIL}}:${{secrets.JIRA_API_TOKEN}} \
#          --header 'Content-Type: application/json' \
#          --data-raw '{
#            "issues": ["${{steps.issue.outputs.issue}}"]
#          }'